#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <sstream>

/*
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

using namespace std;

static string numVecToString(vector<int> num);

int p29_main(int argc, char **argv)
{
    set<string> uniqueTerms;

    // calculating product such that least significant digit is element 0, most significant is element num.size()-1
    int carry;
    for(int a = 2; a <= 100; a++) {
        for(int b = 2; b <= 100; b++) {
            vector<int> num;
            num.push_back(a);
            for(int ii = 2; ii <= b; ii++) {
                carry = 0;
                for(int jj = 0; jj < num.size(); jj++) {
                    int product = num[jj] * a + carry;
                    carry = product / 10;
                    num[jj] = product % 10;
                }
                if(carry) {
                    while(carry > 10) {
                        num.push_back(carry%10);
                        carry /= 10;
                    }
                    num.push_back(carry);
                }
            }

            uniqueTerms.insert(numVecToString(num));
        }
    }

    cout << uniqueTerms.size() << endl;

    return 0;
}

string numVecToString(vector<int> num)
{
    ostringstream oss;
    for(int ii = num.size()-1; ii >= 0; ii--) {
        oss << num[ii];
    }
    return oss.str();
}
